<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: example/protobuf-sync-message/library/proto/area_calculator.proto

namespace Plugins;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>plugins.ShapeMessage</code>
 */
class ShapeMessage extends \Google\Protobuf\Internal\Message
{
    protected $shape;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Plugins\Square $square
     *     @type \Plugins\Rectangle $rectangle
     *     @type \Plugins\Circle $circle
     *     @type \Plugins\Triangle $triangle
     *     @type \Plugins\Parallelogram $parallelogram
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Example\ProtobufSyncMessage\Library\Proto\AreaCalculator::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.plugins.Square square = 1;</code>
     * @return \Plugins\Square|null
     */
    public function getSquare()
    {
        return $this->readOneof(1);
    }

    public function hasSquare()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.plugins.Square square = 1;</code>
     * @param \Plugins\Square $var
     * @return $this
     */
    public function setSquare($var)
    {
        GPBUtil::checkMessage($var, \Plugins\Square::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.plugins.Rectangle rectangle = 2;</code>
     * @return \Plugins\Rectangle|null
     */
    public function getRectangle()
    {
        return $this->readOneof(2);
    }

    public function hasRectangle()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.plugins.Rectangle rectangle = 2;</code>
     * @param \Plugins\Rectangle $var
     * @return $this
     */
    public function setRectangle($var)
    {
        GPBUtil::checkMessage($var, \Plugins\Rectangle::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.plugins.Circle circle = 3;</code>
     * @return \Plugins\Circle|null
     */
    public function getCircle()
    {
        return $this->readOneof(3);
    }

    public function hasCircle()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.plugins.Circle circle = 3;</code>
     * @param \Plugins\Circle $var
     * @return $this
     */
    public function setCircle($var)
    {
        GPBUtil::checkMessage($var, \Plugins\Circle::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.plugins.Triangle triangle = 4;</code>
     * @return \Plugins\Triangle|null
     */
    public function getTriangle()
    {
        return $this->readOneof(4);
    }

    public function hasTriangle()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.plugins.Triangle triangle = 4;</code>
     * @param \Plugins\Triangle $var
     * @return $this
     */
    public function setTriangle($var)
    {
        GPBUtil::checkMessage($var, \Plugins\Triangle::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.plugins.Parallelogram parallelogram = 5;</code>
     * @return \Plugins\Parallelogram|null
     */
    public function getParallelogram()
    {
        return $this->readOneof(5);
    }

    public function hasParallelogram()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.plugins.Parallelogram parallelogram = 5;</code>
     * @param \Plugins\Parallelogram $var
     * @return $this
     */
    public function setParallelogram($var)
    {
        GPBUtil::checkMessage($var, \Plugins\Parallelogram::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getShape()
    {
        return $this->whichOneof("shape");
    }

}

